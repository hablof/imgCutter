// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package router is a generated GoMock package.
package router

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocktemplateExecutor is a mock of templateExecutor interface.
type MocktemplateExecutor struct {
	ctrl     *gomock.Controller
	recorder *MocktemplateExecutorMockRecorder
}

// MocktemplateExecutorMockRecorder is the mock recorder for MocktemplateExecutor.
type MocktemplateExecutorMockRecorder struct {
	mock *MocktemplateExecutor
}

// NewMocktemplateExecutor creates a new mock instance.
func NewMocktemplateExecutor(ctrl *gomock.Controller) *MocktemplateExecutor {
	mock := &MocktemplateExecutor{ctrl: ctrl}
	mock.recorder = &MocktemplateExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktemplateExecutor) EXPECT() *MocktemplateExecutorMockRecorder {
	return m.recorder
}

// ExecuteTemplate mocks base method.
func (m *MocktemplateExecutor) ExecuteTemplate(wr io.Writer, name string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTemplate", wr, name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteTemplate indicates an expected call of ExecuteTemplate.
func (mr *MocktemplateExecutorMockRecorder) ExecuteTemplate(wr, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTemplate", reflect.TypeOf((*MocktemplateExecutor)(nil).ExecuteTemplate), wr, name, data)
}
