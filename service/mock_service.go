// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionService is a mock of SessionService interface.
type MockSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceMockRecorder
}

// MockSessionServiceMockRecorder is the mock recorder for MockSessionService.
type MockSessionServiceMockRecorder struct {
	mock *MockSessionService
}

// NewMockSessionService creates a new mock instance.
func NewMockSessionService(ctrl *gomock.Controller) *MockSessionService {
	mock := &MockSessionService{ctrl: ctrl}
	mock.recorder = &MockSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionService) EXPECT() *MockSessionServiceMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockSessionService) Find(id string) (*Session, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSessionServiceMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSessionService)(nil).Find), id)
}

// New mocks base method.
func (m *MockSessionService) New() *Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(*Session)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockSessionServiceMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockSessionService)(nil).New))
}

// RemoveAll mocks base method.
func (m *MockSessionService) RemoveAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockSessionServiceMockRecorder) RemoveAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockSessionService)(nil).RemoveAll))
}

// TerminateSession mocks base method.
func (m *MockSessionService) TerminateSession(session *Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateSession indicates an expected call of TerminateSession.
func (mr *MockSessionServiceMockRecorder) TerminateSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSession", reflect.TypeOf((*MockSessionService)(nil).TerminateSession), session)
}

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// CutFile mocks base method.
func (m *MockFileService) CutFile(s *Session, fileName string, dX, dY int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CutFile", s, fileName, dX, dY)
	ret0, _ := ret[0].(error)
	return ret0
}

// CutFile indicates an expected call of CutFile.
func (mr *MockFileServiceMockRecorder) CutFile(s, fileName, dX, dY interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CutFile", reflect.TypeOf((*MockFileService)(nil).CutFile), s, fileName, dX, dY)
}

// DeleteFile mocks base method.
func (m *MockFileService) DeleteFile(s *Session, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", s, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServiceMockRecorder) DeleteFile(s, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileService)(nil).DeleteFile), s, fileName)
}

// GetArchiveName mocks base method.
func (m *MockFileService) GetArchiveName(s *Session, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveName", s, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveName indicates an expected call of GetArchiveName.
func (mr *MockFileServiceMockRecorder) GetArchiveName(s, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveName", reflect.TypeOf((*MockFileService)(nil).GetArchiveName), s, fileName)
}

// GetFiles mocks base method.
func (m *MockFileService) GetFiles(s *Session) ([]MyFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", s)
	ret0, _ := ret[0].([]MyFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockFileServiceMockRecorder) GetFiles(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockFileService)(nil).GetFiles), s)
}

// UploadFile mocks base method.
func (m *MockFileService) UploadFile(s *Session, uploadingFile io.Reader, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", s, uploadingFile, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServiceMockRecorder) UploadFile(s, uploadingFile, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileService)(nil).UploadFile), s, uploadingFile, fileName)
}
